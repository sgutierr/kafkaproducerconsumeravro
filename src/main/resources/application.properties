# Application persistence
quarkus.datasource.db-kind = h2
quarkus.datasource.jdbc.url = jdbc:h2:mem:default;DB_CLOSE_DELAY=-1
quarkus.datasource.jdbc.max-size = 8
quarkus.datasource.jdbc.min-size = 2
quarkus.hibernate-orm.dialect = org.hibernate.dialect.H2Dialect
quarkus.hibernate-orm.database.generation = drop-and-create
quarkus.hibernate-orm.log.sql = false
quarkus.hibernate-orm.sql-load-script = import.sql

# Configure the outgoing channel
mp.messaging.outgoing.new-bank-account-out.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer
mp.messaging.outgoing.new-bank-account-out.apicurio.registry.url = http://YOUR_SERVICE_REGISTRY_URL/apis/registry/v2
mp.messaging.outgoing.new-bank-account-out.connector = smallrye-kafka
mp.messaging.outgoing.new-bank-account-out.topic = new-bank-account
mp.messaging.outgoing.new-bank-account-out.apicurio.registry.auto-register = true
# Configure the incoming channel
mp.messaging.incoming.new-bank-account-in.connector = smallrye-kafka
mp.messaging.incoming.new-bank-account-in.topic = new-bank-account
mp.messaging.incoming.new-bank-account-in.enable.auto.commit = false
mp.messaging.incoming.new-bank-account-in.auto.offset.reset = earliest
mp.messaging.incoming.new-bank-account-in.apicurio.registry.use-specific-avro-reader = true
mp.messaging.incoming.new-bank-account-in.value.deserializer=io.apicurio.registry.serde.avro.AvroKafkaDeserializer
mp.messaging.incoming.new-bank-account-in.apicurio.registry.url=http://YOUR_SERVICE_REGISTRY_URL/apis/registry/v2

# Kafka Configuration

quarkus.kafka.devservices.enabled=false
kafka.bootstrap.servers = YOUR_KAFKA_BOOTSTRAP_HOST:YOUR_KAFKA_BOOTSTRAP_PORT

# SSL connection
kafka.security.protocol = SSL
kafka.ssl.truststore.location = /home/sgutierr/development/Kafka/AD482/truststore.jks 
kafka.ssl.truststore.password = password 
